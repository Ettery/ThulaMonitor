/**
 * This class is generated by jOOQ
 */
package net.ettery.jooq.thula.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import net.ettery.jooq.thula.generated.Keys;
import net.ettery.jooq.thula.generated.Wordpress_01;
import net.ettery.jooq.thula.generated.tables.records.WpCommentsRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WpComments extends TableImpl<WpCommentsRecord> {

    private static final long serialVersionUID = -500466281;

    /**
     * The reference instance of <code>wordpress.01.wp_comments</code>
     */
    public static final WpComments WP_COMMENTS = new WpComments();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WpCommentsRecord> getRecordType() {
        return WpCommentsRecord.class;
    }

    /**
     * The column <code>wordpress.01.wp_comments.comment_ID</code>.
     */
    public final TableField<WpCommentsRecord, ULong> COMMENT_ID = createField("comment_ID", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>wordpress.01.wp_comments.comment_post_ID</code>.
     */
    public final TableField<WpCommentsRecord, ULong> COMMENT_POST_ID = createField("comment_post_ID", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>wordpress.01.wp_comments.comment_author</code>.
     */
    public final TableField<WpCommentsRecord, String> COMMENT_AUTHOR = createField("comment_author", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>wordpress.01.wp_comments.comment_author_email</code>.
     */
    public final TableField<WpCommentsRecord, String> COMMENT_AUTHOR_EMAIL = createField("comment_author_email", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>wordpress.01.wp_comments.comment_author_url</code>.
     */
    public final TableField<WpCommentsRecord, String> COMMENT_AUTHOR_URL = createField("comment_author_url", org.jooq.impl.SQLDataType.VARCHAR.length(200).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>wordpress.01.wp_comments.comment_author_IP</code>.
     */
    public final TableField<WpCommentsRecord, String> COMMENT_AUTHOR_IP = createField("comment_author_IP", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>wordpress.01.wp_comments.comment_date</code>.
     */
    public final TableField<WpCommentsRecord, Timestamp> COMMENT_DATE = createField("comment_date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0000-00-00 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>wordpress.01.wp_comments.comment_date_gmt</code>.
     */
    public final TableField<WpCommentsRecord, Timestamp> COMMENT_DATE_GMT = createField("comment_date_gmt", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0000-00-00 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>wordpress.01.wp_comments.comment_content</code>.
     */
    public final TableField<WpCommentsRecord, String> COMMENT_CONTENT = createField("comment_content", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>wordpress.01.wp_comments.comment_karma</code>.
     */
    public final TableField<WpCommentsRecord, Integer> COMMENT_KARMA = createField("comment_karma", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>wordpress.01.wp_comments.comment_approved</code>.
     */
    public final TableField<WpCommentsRecord, String> COMMENT_APPROVED = createField("comment_approved", org.jooq.impl.SQLDataType.VARCHAR.length(20).nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>wordpress.01.wp_comments.comment_agent</code>.
     */
    public final TableField<WpCommentsRecord, String> COMMENT_AGENT = createField("comment_agent", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>wordpress.01.wp_comments.comment_type</code>.
     */
    public final TableField<WpCommentsRecord, String> COMMENT_TYPE = createField("comment_type", org.jooq.impl.SQLDataType.VARCHAR.length(20).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>wordpress.01.wp_comments.comment_parent</code>.
     */
    public final TableField<WpCommentsRecord, ULong> COMMENT_PARENT = createField("comment_parent", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>wordpress.01.wp_comments.user_id</code>.
     */
    public final TableField<WpCommentsRecord, ULong> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * Create a <code>wordpress.01.wp_comments</code> table reference
     */
    public WpComments() {
        this("wp_comments", null);
    }

    /**
     * Create an aliased <code>wordpress.01.wp_comments</code> table reference
     */
    public WpComments(String alias) {
        this(alias, WP_COMMENTS);
    }

    private WpComments(String alias, Table<WpCommentsRecord> aliased) {
        this(alias, aliased, null);
    }

    private WpComments(String alias, Table<WpCommentsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Wordpress_01.WORDPRESS_01;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<WpCommentsRecord, ULong> getIdentity() {
        return Keys.IDENTITY_WP_COMMENTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<WpCommentsRecord> getPrimaryKey() {
        return Keys.KEY_WP_COMMENTS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<WpCommentsRecord>> getKeys() {
        return Arrays.<UniqueKey<WpCommentsRecord>>asList(Keys.KEY_WP_COMMENTS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WpComments as(String alias) {
        return new WpComments(alias, this);
    }

    /**
     * Rename this table
     */
    public WpComments rename(String name) {
        return new WpComments(name, null);
    }
}
